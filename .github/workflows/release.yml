name: Release Management

on:
  push:
    tags:
      - 'v*'

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate tag format
      run: |
        if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid tag format. Expected: v1.0.0 or v1.0.0-beta"
          exit 1
        fi
    
    - name: Check package.json version matches tag
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION="${{ github.ref_name }}"
        TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix
        
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "Package version ($PACKAGE_VERSION) doesn't match tag version ($TAG_VERSION)"
          exit 1
        fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build package
      run: npm run build
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --no-merges)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          ```bash
          npx osc-mcp-server@${{ github.ref_name }}
          ```
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build package
      run: npm run build
    
    - name: Publish to NPM with provenance
      run: npm publish --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        NPM_CONFIG_PROVENANCE: true